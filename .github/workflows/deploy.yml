name: User Service CI/CD Pipeline with OIDC

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::733995297457:role/GitHub_Actions
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get current timestamp
        id: vars
        run: echo "current_time=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: user-service
          IMAGE_TAG: ${{ steps.vars.outputs.current_time }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::733995297457:role/GitHub_Actions
          aws-region: ap-northeast-2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get current task definition ARN
        id: get-task-def
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster fog-cluster \
            --services user-service \
            --region ap-northeast-2 \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          echo "üîç Current task definition: $CURRENT_TASK_DEF"

      - name: Describe current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ steps.get-task-def.outputs.current_task_def }} \
            --region ap-northeast-2 > current-task-definition.json
          echo "üìÑ Current task definition saved to current-task-definition.json"

      - name: Create new task definition
        run: |
          jq '.taskDefinition | {
            family: .family,
            executionRoleArn: .executionRoleArn,
            taskRoleArn: .taskRoleArn,
            networkMode: .networkMode,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory,
            containerDefinitions: .containerDefinitions,
            volumes: .volumes,
            placementConstraints: .placementConstraints
          } | with_entries(select(.value != null))' \
          current-task-definition.json > new-task-definition.json
          
          echo "üìÑ New task definition created: new-task-definition.json"

      - name: Update image in task definition
        run: |
          jq '.containerDefinitions[0].image = "733995297457.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:latest"' \
          new-task-definition.json > temp.json && mv temp.json new-task-definition.json
          
          echo "üñºÔ∏è Updated image to :latest tag"

      - name: Register new task definition
        id: register-task
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --region ap-northeast-2 \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "üîç NEW_TASK_DEF_ARN value: '$NEW_TASK_DEF_ARN'"
          echo "üîç Variable length: ${#NEW_TASK_DEF_ARN}"
          
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "‚ùå Error: NEW_TASK_DEF_ARN is empty!"
            exit 1
          fi
          
          echo "‚úÖ New task definition registered: $NEW_TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster fog-cluster \
            --service user-service \
            --region ap-northeast-2 \
            --task-definition "${{ steps.register-task.outputs.NEW_TASK_DEF_ARN }}"
          
          echo "üîÑ ECS service updated with new task definition"

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster fog-cluster \
            --services user-service \
            --region ap-northeast-2
          
          echo "‚úÖ Service is now stable"

      - name: Verify deployment
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster fog-cluster \
            --services user-service \
            --region ap-northeast-2 \
            --query 'services[0].status' \
            --output text)
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster fog-cluster \
            --services user-service \
            --region ap-northeast-2 \
            --query 'services[0].runningCount' \
            --output text)
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster fog-cluster \
            --services user-service \
            --region ap-northeast-2 \
            --query 'services[0].desiredCount' \
            --output text)
          
          echo "üìä Service Status: $SERVICE_STATUS"
          echo "üìä Running Count: $RUNNING_COUNT"
          echo "üìä Desired Count: $DESIRED_COUNT"
          
          if [ "$SERVICE_STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment verification failed"
            exit 1
          fi

      - name: CloudFront Cache Invalidation
        run: |
          echo "üîÑ Starting CloudFront cache invalidation..."
          
          # CloudFront Distribution ID
          DISTRIBUTION_ID="E3NPLCVDB66SWW"
          
          # Ï†ÑÏ≤¥ Í≤ΩÎ°ú Î¨¥Ìö®Ìôî (ÏàòÎèôÍ≥º ÎèôÏùº)
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "üìã Invalidation ID: $INVALIDATION_ID"
          echo "‚è≥ Waiting for invalidation to complete..."
          
          # Î¨¥Ìö®Ìôî ÏôÑÎ£å ÎåÄÍ∏∞ (ÏµúÎåÄ 10Î∂Ñ)
          aws cloudfront wait invalidation-completed \
            --distribution-id $DISTRIBUTION_ID \
            --id $INVALIDATION_ID \
            --max-attempts 60 \
            --delay 10
          
          echo "‚úÖ CloudFront cache invalidation completed!"